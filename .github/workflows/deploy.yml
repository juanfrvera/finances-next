name: Deploy to Google Cloud Run

on:
  # Deploy on push to main branch
  push:
    branches: [ main ]
  
  # Deploy on pull request merge
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  SERVICE: finances-next
  REGION: us-central1
  REPOSITORY: finances-next

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    # Only run on merged PRs or direct pushes to main
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
        service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Authorize Docker push
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Create Artifact Registry repository if it doesn't exist
      run: |
        gcloud artifacts repositories describe ${{ env.REPOSITORY }} \
          --location=${{ env.GAR_LOCATION }} || \
        gcloud artifacts repositories create ${{ env.REPOSITORY }} \
          --repository-format=docker \
          --location=${{ env.GAR_LOCATION }} \
          --description="Docker repository for finances-next"

    - name: Build and Push Container
      run: |-
        docker build -f deploy/Dockerfile -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./
        docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

    - name: Create secrets if they don't exist
      run: |
        # Check if secrets exist, create if they don't
        gcloud secrets describe finances-secrets || \
        gcloud secrets create finances-secrets --data-file=/dev/null
        
        # Update secrets with environment variables
        echo -n "${{ secrets.DB_URL }}" | gcloud secrets versions add finances-secrets --data-file=- || true
        echo -n "${{ secrets.DB_NAME }}" | gcloud secrets versions add finances-secrets --data-file=- || true

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE }}
        region: ${{ env.REGION }}
        image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
        env_vars: |
          NODE_ENV=production
          NEXT_TELEMETRY_DISABLED=1
        secrets: |
          DB_URL=finances-secrets:latest
          DB_NAME=finances-secrets:latest
        flags: |
          --port=3000
          --memory=512Mi
          --cpu=1
          --min-instances=0
          --max-instances=3
          --concurrency=50
          --timeout=300
          --ingress=all
          --allow-unauthenticated

    - name: Show Output
      run: echo ${{ steps.deploy.outputs.url }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
      run: |
        echo "üî® Building Docker image..."
        docker build \
          -f deploy/Dockerfile \
          -t $IMAGE_URI \
          --build-arg DB_URL="${{ secrets.DB_URL }}" \
          --build-arg DB_NAME="${{ secrets.DB_NAME }}" \
          .
        
        echo "üì§ Pushing image to ECR..."
        docker push $IMAGE_URI
        
        echo "‚úÖ Image pushed successfully!"
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Deploy App Runner Service
      run: |
        echo "üöÄ Starting App Runner deployment..."
        
        STACK_NAME="finances-next-apprunner-prod"
        TEMPLATE_FILE="deploy/apprunner-template.yaml"
        
        echo "üîÑ Deploying App Runner service..."
        aws cloudformation deploy \
          --template-file $TEMPLATE_FILE \
          --stack-name $STACK_NAME \
          --parameter-overrides \
            ContainerImageUri="${{ env.IMAGE_URI }}" \
            DBUrl="${{ secrets.DB_URL }}" \
            DBName="${{ secrets.DB_NAME }}" \
            Environment=prod \
            MaxInstances=1 \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}

    - name: Get App Runner Service URL
      run: |
        STACK_NAME="finances-next-apprunner-prod"
        
        # Get the service URL from CloudFormation outputs
        SERVICE_URL=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`AppRunnerServiceUrl`].OutputValue' \
          --output text)
        
        echo "üåê App Runner Service URL: $SERVICE_URL"
        echo "::notice title=Deployment Success::App Runner service deployed at $SERVICE_URL"

    - name: Health Check
      run: |
        STACK_NAME="finances-next-apprunner-prod"
        
        # Get the service URL
        SERVICE_URL=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`AppRunnerServiceUrl`].OutputValue' \
          --output text)
        
        # Wait for service to be ready and perform health check
        echo "‚è≥ Waiting for service to be ready..."
        sleep 30
        
        HEALTH_URL="${SERVICE_URL}/api/health"
        echo "üîç Performing health check at: $HEALTH_URL"
        
        # Try health check with retries
        for i in {1..5}; do
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "‚úÖ Health check passed!"
            curl -s "$HEALTH_URL" | jq '.'
            break
          else
            echo "‚è≥ Health check attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
          
          if [ $i -eq 5 ]; then
            echo "‚ùå Health check failed after 5 attempts"
            exit 1
          fi
        done
