name: Deploy to AWS Lambda

on:
  # Deploy on push to main branch
  push:
    branches: [ main ]
  
  # Deploy on pull request merge
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: finances-next
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    # Only run on merged PRs or direct pushes to main
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

    - name: Build, tag, and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build Docker image using Dockerfile in deploy folder
        docker build -f deploy/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Output image URI for later steps
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy CloudFormation stack
      run: |
        STACK_NAME="finances-next-prod"
        TEMPLATE_FILE="deploy/cloudformation-template.yaml"
        
        echo "Deploying stack: $STACK_NAME"
        echo "Template: $TEMPLATE_FILE"
        echo "Container Image: $IMAGE_URI"
        
        aws cloudformation deploy \
          --template-file "$TEMPLATE_FILE" \
          --stack-name "$STACK_NAME" \
          --parameter-overrides \
            ContainerImageUri="$IMAGE_URI" \
            MongoDBConnectionString="${{ secrets.MONGODB_CONNECTION_STRING }}" \
            DBName="${{ secrets.DB_NAME }}" \
            Environment="prod" \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}

    - name: Get deployment information
      id: deployment
      run: |
        STACK_NAME="finances-next-prod"
        
        # Get API Gateway URL
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text)
        
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        
        # Get CloudFront URL if available
        CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontUrl`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        if [ -n "$CLOUDFRONT_URL" ] && [ "$CLOUDFRONT_URL" != "None" ]; then
          echo "cloudfront_url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT
        fi
        
        echo "### Deployment Complete! 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "**Container Image:** $IMAGE_URI" >> $GITHUB_STEP_SUMMARY
        echo "**API Gateway URL:** $API_URL" >> $GITHUB_STEP_SUMMARY
        if [ -n "$CLOUDFRONT_URL" ] && [ "$CLOUDFRONT_URL" != "None" ]; then
          echo "**CloudFront URL:** $CLOUDFRONT_URL" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Your application is now live!**" >> $GITHUB_STEP_SUMMARY

    - name: Test deployment
      run: |
        API_URL="${{ steps.deployment.outputs.api_url }}"
        
        if [ -n "$API_URL" ] && [ "$API_URL" != "None" ]; then
          echo "Testing deployment at: $API_URL"
          
          # Wait a moment for Lambda to be ready
          sleep 10
          
          # Test with curl
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL" || echo "000")
          
          if [ "$HTTP_STATUS" == "200" ]; then
            echo "✅ Deployment test passed!"
            echo "🎉 **Deployment Test: PASSED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Deployment test failed with status: $HTTP_STATUS"
            echo "⚠️ **Deployment Test: FAILED** (Status: $HTTP_STATUS)" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ Could not retrieve API URL for testing"
          echo "⚠️ **Deployment Test: SKIPPED** (No API URL)" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Container deployment completed"
