name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  SERVICE_NAME: finances-next
  REGION: ${{ vars.GCP_REGION }}

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    environment: production  # Specify the environment to access environment secrets
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests (if any)
      run: npm test --if-present

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Configure Docker for Artifact Registry
      run: |
        DOCKER_REGISTRY="${REGION}-docker.pkg.dev"
        gcloud auth configure-docker "$DOCKER_REGISTRY"

    - name: Create Artifact Registry repository (if not exists)
      run: |
        gcloud artifacts repositories create $SERVICE_NAME \
          --repository-format=docker \
          --location=$REGION \
          --description="Docker repository for $SERVICE_NAME" || true

    - name: Build Docker image
      run: |
        DOCKER_REGISTRY="${REGION}-docker.pkg.dev"
        docker build \
          -f deploy/Dockerfile.production \
          -t "$DOCKER_REGISTRY/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA" \
          -t "$DOCKER_REGISTRY/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:latest" \
          .

    - name: Push Docker image
      run: |
        DOCKER_REGISTRY="${REGION}-docker.pkg.dev"
        docker push "$DOCKER_REGISTRY/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA"
        docker push "$DOCKER_REGISTRY/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:latest"

    - name: Deploy to Cloud Run
      run: |
        DOCKER_REGISTRY="${REGION}-docker.pkg.dev"
        gcloud run deploy $SERVICE_NAME \
          --image "$DOCKER_REGISTRY/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA" \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "DB_URL=${{ secrets.DB_URL }}" \
          --set-env-vars "DB_NAME=${{ secrets.DB_NAME }}" \
          --set-env-vars "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars "NODE_ENV=production" \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 5 \
          --port 3000

    - name: Cleanup old images
      run: |
        DOCKER_REGISTRY="${REGION}-docker.pkg.dev"
        IMAGE_REPO="$DOCKER_REGISTRY/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME"
        
        echo "Cleaning up old Docker images..."
        echo "Repository: $IMAGE_REPO"
        
        # Get all tags sorted by update time (newest first)
        echo "Getting all tags..."
        gcloud artifacts docker tags list "$IMAGE_REPO" \
          --format="table(tag,digest,updateTime)" \
          --sort-by="~UPDATE_TIME"
        
        # Get only commit SHA tags (exclude 'latest'), sorted by update time (newest first)
        ALL_SHA_TAGS=$(gcloud artifacts docker tags list "$IMAGE_REPO" \
          --format="value(tag)" \
          --sort-by="~UPDATE_TIME" | grep -v '^latest$')
        
        echo "All SHA tags found (excluding 'latest'), newest first:"
        echo "$ALL_SHA_TAGS"
        
        # Get the digest that 'latest' points to
        LATEST_DIGEST=$(gcloud artifacts docker tags list "$IMAGE_REPO" \
          --format="value(digest)" \
          --filter="tag=latest")
        
        echo "Latest tag points to digest: $LATEST_DIGEST"
        
        # Find which SHA tag points to the same digest as 'latest'
        CURRENT_SHA_TAG=""
        if [ -n "$LATEST_DIGEST" ]; then
          CURRENT_SHA_TAG=$(gcloud artifacts docker tags list "$IMAGE_REPO" \
            --format="value(tag)" \
            --filter="digest=$LATEST_DIGEST AND tag!=latest" | head -1)
          echo "Current SHA tag (same as latest): $CURRENT_SHA_TAG"
        fi
        
        # Count SHA tags
        TOTAL_SHA_TAGS=$(echo "$ALL_SHA_TAGS" | grep -v '^$' | wc -l)
        echo "Total SHA tags (excluding 'latest'): $TOTAL_SHA_TAGS"
        
        if [ "$TOTAL_SHA_TAGS" -le 2 ]; then
          echo "No cleanup needed - only $TOTAL_SHA_TAGS SHA tags total (keeping all, plus 'latest')"
        else
          echo "Need to delete old SHA tags (keeping current SHA + 1 previous SHA + 'latest')..."
          
          # Get SHA tags to delete (exclude current SHA tag and keep only 1 previous)
          SHA_TAGS_TO_DELETE=""
          TAGS_KEPT=0
          
          # Process tags outside subshell to preserve variables
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              if [ "$tag" = "$CURRENT_SHA_TAG" ]; then
                echo "Keeping current SHA tag: $tag (same image as latest)"
              elif [ $TAGS_KEPT -lt 1 ]; then
                echo "Keeping previous SHA tag: $tag"
                TAGS_KEPT=$((TAGS_KEPT + 1))
              else
                echo "Will delete old SHA tag: $tag"
                if [ -z "$SHA_TAGS_TO_DELETE" ]; then
                  SHA_TAGS_TO_DELETE="$tag"
                else
                  SHA_TAGS_TO_DELETE="$SHA_TAGS_TO_DELETE"$'\n'"$tag"
                fi
              fi
            fi
          done <<< "$ALL_SHA_TAGS"
          
          if [ -n "$SHA_TAGS_TO_DELETE" ]; then
            echo "SHA tags to delete:"
            echo "$SHA_TAGS_TO_DELETE"
            
            # Delete old SHA tags one by one
            echo "$SHA_TAGS_TO_DELETE" | while IFS= read -r tag; do
              if [ -n "$tag" ] && [ "$tag" != "" ]; then
                echo "Deleting old SHA tag: $tag"
                if gcloud artifacts docker tags delete "$IMAGE_REPO:$tag" --quiet; then
                  echo "✅ Successfully deleted tag: $tag"
                else
                  echo "❌ Failed to delete tag: $tag"
                fi
              fi
            done
          else
            echo "No SHA tags to delete"
          fi
        fi

    - name: Show service URL
      run: |
        echo "Service deployed successfully!"
        gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)"
