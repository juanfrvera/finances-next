AWSTemplateFormatVersion: '2010-09-09'
Description: 'Optimized Lambda deployment for Next.js Finances Next Dashboard'

Parameters:
  ContainerImageUri:
    Type: String
    Description: Container image URI from ECR
    Default: ''
  
  MongoDBConnectionString:
    Type: String
    Description: MongoDB connection string
    NoEcho: true
  
  DBName:
    Type: String
    Description: MongoDB database name
    NoEcho: true
  
  DomainName:
    Type: String
    Description: Custom domain name (optional)
    Default: ''
  
  CertificateArn:
    Type: String
    Description: SSL Certificate ARN for custom domain
    Default: ''
  
  Environment:
    Type: String
    Description: Environment name (dev, staging, prod)
    Default: prod
    AllowedValues: [dev, staging, prod]

Conditions:
  HasContainerImage: !Not [!Equals [!Ref ContainerImageUri, '']]
  HasCustomDomain: !And
    - !Not [!Equals [!Ref DomainName, '']]
    - !Not [!Equals [!Ref CertificateArn, '']]

Resources:
  # S3 Bucket for static assets (_next/static, images, etc.)
  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-static-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # S3 Bucket Policy for public read access to static assets
  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub ${StaticAssetsBucket}/*

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-nextjs-function
      RetentionInDays: 14

  # IAM Role for Lambda with enhanced permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3StaticAssetsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub ${StaticAssetsBucket}/*
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Ref StaticAssetsBucket

  # Lambda Function for Next.js SSR
  NextJSLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-nextjs-function
      PackageType: !If [HasContainerImage, 'Image', 'Zip']
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 15
      MemorySize: 512
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          MONGODB_URI: !Ref MongoDBConnectionString
          DB_NAME: !Ref DBName
          STATIC_BUCKET: !Ref StaticAssetsBucket
          NEXT_TELEMETRY_DISABLED: '1'
      Code: !If
        - HasContainerImage
        - ImageUri: !Ref ContainerImageUri
        - ZipFile: |
            // Placeholder Lambda function
            exports.handler = async (event, context) => {
              console.log('Event:', JSON.stringify(event, null, 2));
              
              // Basic routing for Next.js pages
              const path = event.path || event.rawPath || '/';
              const method = event.httpMethod || event.requestContext?.http?.method || 'GET';
              
              // Handle static assets
              if (path.startsWith('/_next/static/') || path.startsWith('/static/')) {
                return {
                  statusCode: 302,
                  headers: {
                    Location: `https://${process.env.STATIC_BUCKET}.s3.amazonaws.com${path}`,
                    'Cache-Control': 'public, max-age=31536000, immutable'
                  }
                };
              }
            
            // Handle favicon and other static files
            if (path.match(/\.(ico|png|jpg|jpeg|gif|svg|css|js|woff|woff2|ttf|eot)$/)) {
              return {
                statusCode: 302,
                headers: {
                  Location: `https://${process.env.STATIC_BUCKET}.s3.amazonaws.com${path}`,
                  'Cache-Control': 'public, max-age=86400'
                }
              };
            }
            
            // Basic HTML response for now
            const html = `
              <!DOCTYPE html>
              <html>
                <head>
                  <title>Finances Dashboard</title>
                  <meta charset="utf-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1">
                </head>
                <body>
                  <div id="__next">
                    <h1>Finances Dashboard</h1>
                    <p>Lambda deployment successful!</p>
                    <p>Path: ${path}</p>
                    <p>Method: ${method}</p>
                    <p>Deploy your Next.js build to complete the setup.</p>
                  </div>
                </body>
              </html>
            `;
            
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'text/html; charset=utf-8',
                'Cache-Control': 'no-cache, no-store, must-revalidate'
              },
              body: html
            };
          };

  # API Gateway V2 (HTTP API - better for Lambda integration)
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-http-api
      Description: HTTP API for Next.js application
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: false
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        AllowOrigins:
          - "*"
        ExposeHeaders:
          - "*"
        MaxAge: 86400

  # Lambda Integration for HTTP API
  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NextJSLambda.Arn}/invocations
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000

  # Catch-all route for Next.js routing
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: $default
      Target: !Sub integrations/${LambdaIntegration}

  # API Gateway Stage
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref Environment
      AutoDeploy: true
      ThrottleSettings:
        BurstLimit: 100
        RateLimit: 50

  # Lambda Permission for API Gateway V2
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NextJSLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*

  # CloudFront Distribution for global CDN
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub ${AWS::StackName} Next.js App Distribution
        HttpVersion: http2
        IPV6Enabled: true
        Aliases: !If
          - HasCustomDomain
          - [!Ref DomainName]
          - !Ref AWS::NoValue
        ViewerCertificate: !If
          - HasCustomDomain
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
          # API Gateway Origin for SSR
          - Id: ApiGatewayOrigin
            DomainName: !Sub ${HttpApi}.execute-api.${AWS::Region}.amazonaws.com
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [TLSv1.2]
          # S3 Origin for static assets
          - Id: S3Origin
            DomainName: !GetAtt StaticAssetsBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOAI}
        DefaultCacheBehavior:
          TargetOriginId: ApiGatewayOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # CachingDisabled
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # CORS-S3Origin
        CacheBehaviors:
          # Static assets with long-term caching
          - PathPattern: "_next/static/*"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            Compress: true
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized
          # Other static files
          - PathPattern: "static/*"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            Compress: true
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized
          # Favicon and common static files
          - PathPattern: "*.ico"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized

  # CloudFront Origin Access Identity for S3
  CloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: !Sub OAI for ${AWS::StackName} static assets

Outputs:
  ApiGatewayUrl:
    Description: HTTP API Gateway URL
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${AWS::StackName}-ApiGatewayUrl
  
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub ${AWS::StackName}-CloudFrontDistributionId
  
  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-CloudFrontDomainName
  
  StaticAssetsBucket:
    Description: S3 Bucket for static assets
    Value: !Ref StaticAssetsBucket
    Export:
      Name: !Sub ${AWS::StackName}-StaticAssetsBucket
  
  LambdaFunctionName:
    Description: Lambda Function Name
    Value: !Ref NextJSLambda
    Export:
      Name: !Sub ${AWS::StackName}-LambdaFunctionName
  
  LambdaFunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt NextJSLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaFunctionArn
