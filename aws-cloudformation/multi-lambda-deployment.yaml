AWSTemplateFormatVersion: '2010-09-09'
Description: 'Multi-Lambda architecture for Next.js Finances Dashboard'

Parameters:
  MongoDBConnectionString:
    Type: String
    Description: MongoDB connection string
    NoEcho: true
  
  Environment:
    Type: String
    Description: Environment name (dev, staging, prod)
    Default: prod
    AllowedValues: [dev, staging, prod]
  
  DomainName:
    Type: String
    Description: Custom domain name (optional)
    Default: ''
  
  CertificateArn:
    Type: String
    Description: SSL Certificate ARN for custom domain
    Default: ''

Conditions:
  HasCustomDomain: !And
    - !Not [!Equals [!Ref DomainName, '']]
    - !Not [!Equals [!Ref CertificateArn, '']]

Resources:
  # S3 Bucket for static assets
  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-static-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # S3 Bucket Policy for public read access
  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub ${StaticAssetsBucket}/*

  # CloudWatch Log Groups
  PagesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-pages-function
      RetentionInDays: 14

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-api-function
      RetentionInDays: 14

  AuthLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-auth-function
      RetentionInDays: 14

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3StaticAssetsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [s3:GetObject, s3:PutObject]
                Resource: !Sub ${StaticAssetsBucket}/*
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Ref StaticAssetsBucket
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-*

  # Lambda Function 1: Pages/SSR (Optimized for rendering)
  PagesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-pages-function
      Runtime: nodejs18.x
      Handler: pages.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 1536  # Higher memory for faster rendering
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          MONGODB_URI: !Ref MongoDBConnectionString
          STATIC_BUCKET: !Ref StaticAssetsBucket
          NEXT_TELEMETRY_DISABLED: '1'
          LAMBDA_TYPE: 'pages'
      Code:
        ZipFile: |
          // Pages Lambda - handles SSR and static pages
          exports.handler = async (event, context) => {
            console.log('Pages Lambda - Event:', JSON.stringify(event, null, 2));
            
            const path = event.rawPath || event.path || '/';
            const method = event.requestContext?.http?.method || 'GET';
            
            // Handle static asset redirects
            if (path.startsWith('/_next/static/') || path.startsWith('/static/')) {
              return {
                statusCode: 302,
                headers: {
                  Location: `https://${process.env.STATIC_BUCKET}.s3.amazonaws.com${path}`,
                  'Cache-Control': 'public, max-age=31536000, immutable'
                }
              };
            }
            
            // Handle page routes
            const html = `
              <!DOCTYPE html>
              <html>
                <head>
                  <title>Finances Dashboard</title>
                  <meta charset="utf-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1">
                </head>
                <body>
                  <div id="__next">
                    <h1>Finances Dashboard - Pages Lambda</h1>
                    <p>Multi-Lambda architecture deployed!</p>
                    <p>Path: ${path}</p>
                    <p>Method: ${method}</p>
                    <p>Lambda: Pages/SSR Handler</p>
                  </div>
                </body>
              </html>
            `;
            
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'text/html; charset=utf-8',
                'Cache-Control': 'no-cache, no-store, must-revalidate'
              },
              body: html
            };
          };

  # Lambda Function 2: API Routes (Optimized for data operations)
  ApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-api-function
      Runtime: nodejs18.x
      Handler: api.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60  # Longer timeout for database operations
      MemorySize: 1024
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          MONGODB_URI: !Ref MongoDBConnectionString
          NEXT_TELEMETRY_DISABLED: '1'
          LAMBDA_TYPE: 'api'
      Code:
        ZipFile: |
          // API Lambda - handles API routes and data operations
          exports.handler = async (event, context) => {
            console.log('API Lambda - Event:', JSON.stringify(event, null, 2));
            
            const path = event.rawPath || event.path || '/';
            const method = event.requestContext?.http?.method || 'GET';
            
            // Handle API routes
            if (path.startsWith('/api/')) {
              return {
                statusCode: 200,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE',
                  'Access-Control-Allow-Headers': 'Content-Type, Authorization'
                },
                body: JSON.stringify({
                  message: 'API Lambda Handler',
                  path: path,
                  method: method,
                  timestamp: new Date().toISOString()
                })
              };
            }
            
            return {
              statusCode: 404,
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ error: 'Not Found' })
            };
          };

  # Lambda Function 3: Auth/Heavy Operations (Optimized for processing)
  AuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-auth-function
      Runtime: nodejs18.x
      Handler: auth.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 120  # Longer timeout for heavy operations
      MemorySize: 2048  # Higher memory for processing
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          MONGODB_URI: !Ref MongoDBConnectionString
          NEXT_TELEMETRY_DISABLED: '1'
          LAMBDA_TYPE: 'auth'
      Code:
        ZipFile: |
          // Auth Lambda - handles authentication and heavy operations
          exports.handler = async (event, context) => {
            console.log('Auth Lambda - Event:', JSON.stringify(event, null, 2));
            
            const path = event.rawPath || event.path || '/';
            const method = event.requestContext?.http?.method || 'GET';
            
            // Handle auth routes
            if (path.startsWith('/api/auth/') || path.startsWith('/auth/')) {
              return {
                statusCode: 200,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({
                  message: 'Auth Lambda Handler',
                  path: path,
                  method: method,
                  timestamp: new Date().toISOString()
                })
              };
            }
            
            return {
              statusCode: 404,
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ error: 'Not Found' })
            };
          };

  # HTTP API Gateway V2
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-multi-lambda-api
      Description: Multi-Lambda HTTP API for Next.js
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: false
        AllowHeaders: ["*"]
        AllowMethods: ["*"]
        AllowOrigins: ["*"]
        ExposeHeaders: ["*"]
        MaxAge: 86400

  # Lambda Integrations
  PagesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PagesLambda.Arn}/invocations
      PayloadFormatVersion: '2.0'

  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations
      PayloadFormatVersion: '2.0'

  AuthIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations
      PayloadFormatVersion: '2.0'

  # Routes with path-based routing
  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'ANY /api/{proxy+}'
      Target: !Sub integrations/${ApiIntegration}

  AuthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'ANY /api/auth/{proxy+}'
      Target: !Sub integrations/${AuthIntegration}

  AuthRoute2:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'ANY /auth/{proxy+}'
      Target: !Sub integrations/${AuthIntegration}

  # Default route for pages (catch-all)
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: $default
      Target: !Sub integrations/${PagesIntegration}

  # API Stage
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref Environment
      AutoDeploy: true
      ThrottleSettings:
        BurstLimit: 200
        RateLimit: 100

  # Lambda Permissions
  PagesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PagesLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*

  ApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*

  AuthLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*

  # CloudFront Distribution (same as single Lambda)
  CloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: !Sub OAI for ${AWS::StackName} static assets

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub ${AWS::StackName} Multi-Lambda Distribution
        HttpVersion: http2
        IPV6Enabled: true
        Aliases: !If
          - HasCustomDomain
          - [!Ref DomainName]
          - !Ref AWS::NoValue
        ViewerCertificate: !If
          - HasCustomDomain
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
          - Id: ApiGatewayOrigin
            DomainName: !Sub ${HttpApi}.execute-api.${AWS::Region}.amazonaws.com
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [TLSv1.2]
          - Id: S3Origin
            DomainName: !GetAtt StaticAssetsBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOAI}
        DefaultCacheBehavior:
          TargetOriginId: ApiGatewayOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # CachingDisabled
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # CORS-S3Origin
        CacheBehaviors:
          - PathPattern: "_next/static/*"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            Compress: true
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized

Outputs:
  ApiGatewayUrl:
    Description: HTTP API Gateway URL
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${AWS::StackName}-ApiGatewayUrl
  
  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-CloudFrontDomainName
  
  StaticAssetsBucket:
    Description: S3 Bucket for static assets
    Value: !Ref StaticAssetsBucket
    Export:
      Name: !Sub ${AWS::StackName}-StaticAssetsBucket
  
  PagesLambdaName:
    Description: Pages Lambda Function Name
    Value: !Ref PagesLambda
    Export:
      Name: !Sub ${AWS::StackName}-PagesLambdaName
  
  ApiLambdaName:
    Description: API Lambda Function Name
    Value: !Ref ApiLambda
    Export:
      Name: !Sub ${AWS::StackName}-ApiLambdaName
  
  AuthLambdaName:
    Description: Auth Lambda Function Name
    Value: !Ref AuthLambda
    Export:
      Name: !Sub ${AWS::StackName}-AuthLambdaName
